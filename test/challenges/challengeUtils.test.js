// Generated by CoffeeScript 1.10.0
var chai, expect, subject;

chai = require("chai");

subject = require("../../challenges/challengeUtils");

chai.use(require('chai-things'));

expect = chai.expect;

describe('challengeutils', function() {
  describe('getFirstIndexOfCoordinate', function() {
    it('finds the coordinate', function() {
      var index;
      index = subject.getFirstIndexOfCoordinate([3, 0], ['F', 'F', 'F', 'F', 'F'], [0, 0]);
      return expect(index).to.equal(3);
    });
    it('returns 0 if start point', function() {
      var index;
      index = subject.getFirstIndexOfCoordinate([0, 0], ['F', 'F', 'F', 'F', 'F'], [0, 0]);
      return expect(index).to.equal(0);
    });
    return it('return undefined if not there', function() {
      var index;
      index = subject.getFirstIndexOfCoordinate([10, 10], ['F', 'F', 'F', 'F', 'F'], [0, 0]);
      return expect(index).to.be.undefined;
    });
  });
  describe('#calculatePath', function() {
    it('adds 1 to X on F', function() {
      return expect(subject.calculatePath(['F'], [0, 0])).to.deep.equal([[0, 0], [1, 0]]);
    });
    it('adds 1 to Y on L', function() {
      return expect(subject.calculatePath(['L'], [0, 0])).to.deep.equal([[0, 0], [0, 1]]);
    });
    it('subtracts 1 from X on B', function() {
      return expect(subject.calculatePath(['B'], [0, 0])).to.deep.equal([[0, 0], [-1, 0]]);
    });
    it('subtracts 1 from Y on R', function() {
      return expect(subject.calculatePath(['R'], [0, 0])).to.deep.equal([[0, 0], [0, -1]]);
    });
    return it('can go in a loop', function() {
      return expect(subject.calculatePath(['F', 'R', 'B', 'L'], [0, 0])).to.deep.equal([[0, 0], [1, 0], [1, -1], [0, -1], [0, 0]]);
    });
  });
  describe('#calculatedEndPosition', function() {
    it('adds 1 to X on F', function() {
      return expect(subject.calculateEndPosition(['F'], [0, 0])).to.deep.equal([1, 0]);
    });
    it('adds 1 to Y on L', function() {
      return expect(subject.calculateEndPosition(['L'], [0, 0])).to.deep.equal([0, 1]);
    });
    it('subtracts 1 from X on B', function() {
      return expect(subject.calculateEndPosition(['B'], [0, 0])).to.deep.equal([-1, 0]);
    });
    it('subtracts 1 from Y on R', function() {
      return expect(subject.calculateEndPosition(['R'], [0, 0])).to.deep.equal([0, -1]);
    });
    return it('can go in a loop', function() {
      return expect(subject.calculateEndPosition(['F', 'R', 'B', 'L'], [0, 0])).to.deep.equal([0, 0]);
    });
  });
  return describe('#calculateItemCoordinate', function() {
    context('find item', function() {
      it('positions the item on the spot when no instructions', function() {
        var item;
        item = subject.calculateItemCoordinate([], true, [0, 0]);
        return expect(item).to.deep.equal([0, 0]);
      });
      return context('positions the item on the route', function() {
        it('F route', function() {
          var ref, tX, tY;
          ref = subject.calculateItemCoordinate(['F', 'F', 'F', 'F', 'F'], true, [0, 0]), tX = ref[0], tY = ref[1];
          expect(tX).to.be.within(0, 5);
          return expect(tY).to.equal(0);
        });
        it('B route', function() {
          var ref, tX, tY;
          ref = subject.calculateItemCoordinate(['B', 'B', 'B', 'B', 'B'], true, [0, 0]), tX = ref[0], tY = ref[1];
          expect(tX).to.be.within(-5, 0);
          return expect(tY).to.equal(0);
        });
        it('L route', function() {
          var ref, tX, tY;
          ref = subject.calculateItemCoordinate(['L', 'L', 'L', 'L', 'L'], true, [0, 0]), tX = ref[0], tY = ref[1];
          expect(tX).to.equal(0);
          return expect(tY).to.be.within(0, 5);
        });
        it('R route', function() {
          var ref, tX, tY;
          ref = subject.calculateItemCoordinate(['R', 'R', 'R', 'R', 'R'], true, [0, 0]), tX = ref[0], tY = ref[1];
          expect(tX).to.equal(0);
          return expect(tY).to.be.within(-5, 0);
        });
        return it('loop route', function() {
          var ref, tX, tY;
          ref = subject.calculateItemCoordinate(['F', 'L', 'B', 'R'], true, [0, 0]), tX = ref[0], tY = ref[1];
          expect(tX).to.be.within(0, 1);
          return expect(tY).to.be.within(0, 1);
        });
      });
    });
    return context('item not found', function() {
      return it('loop route', function() {
        var item;
        item = subject.calculateItemCoordinate(['F', 'L', 'B', 'R'], false, [0, 0]);
        return expect([[0, 0], [1, 0], [1, 1], [0, 1]]).not.to.contain.something.that.deep.equals(item);
      });
    });
  });
});
