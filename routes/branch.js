// Generated by CoffeeScript 1.10.0
var cleanBranches, connection, ensureExists, entangle, getBranches, io, performSwap, randomiser, round, swapper;

swapper = require("../swapper/swapper");

randomiser = require("../swapper/listRandomiser");

connection = require('./connection');

round = require('./round');

io = null;

exports.initIo = function(_io) {
  return io = _io;
};

exports.list = function(req, res) {
  return getBranches().then(function(branches) {
    return res.render('branches', {
      title: "Code Whispers",
      branches: branches
    });
  })["catch"](function(error) {
    return res.status(500).json(error);
  });
};

exports.getDetails = function(req, res) {
  return Promise.all([round.getRound(), getBranches()]).then(function(arg) {
    var branches, round;
    round = arg[0], branches = arg[1];
    return res.send({
      round: round,
      branches: branches
    });
  })["catch"](function(error) {
    return res.status(500).json(error);
  });
};

getBranches = function() {
  var branchesCollection;
  branchesCollection = connection.collection('branches');
  return branchesCollection.find().toArray();
};

exports.rescan = function() {
  return swapper.getBranchList(function(branches) {
    return ensureExists(branches).then(function() {
      return cleanBranches(branches);
    });
  });
};

ensureExists = function(branches) {
  var branchesCollection;
  if (branches.length === 0) {
    return Promise.resolve();
  } else {
    branchesCollection = connection.collection('branches');
    return branchesCollection.findOne({
      name: branches[0]
    }).then(function(doc) {
      if (!doc) {
        return branchesCollection.save({
          name: branches[0]
        }, {
          safe: true
        });
      }
    }).then(function() {
      return ensureExists(branches.slice(1));
    });
  }
};

cleanBranches = function(rawBranches) {
  var branchesCollection;
  branchesCollection = connection.collection('branches');
  return branchesCollection.remove({
    name: {
      $nin: rawBranches
    }
  }, {
    safe: true
  });
};

exports.add = function(req, res) {
  var name;
  name = req.params['team'];
  return ensureExists([name]).then(function() {
    io.emit('new team', name);
    return res.status(200).send();
  })["catch"](function(error) {
    return res.status(500).json(error);
  });
};

exports.remove = function(req, res) {
  var branchesCollection, name;
  name = req.params['team'];
  branchesCollection = connection.collection('branches');
  return branchesCollection.remove({
    name: name
  }, {
    safe: true
  }).then(function(doc) {
    io.emit('remove team', name);
    return res.send(200);
  })["catch"](function(error) {
    return res.status(500).json(error);
  });
};

exports.swap = function(req, res) {
  return performSwap(function(branchMapping) {
    return res.render('branchMapping', {
      title: "Code Whispers",
      branchMapping: branchMapping
    });
  });
};

performSwap = function(callback) {
  return getBranches().then(function(branches) {
    var sourceBranches, targetBranches;
    sourceBranches = branches.map(function(item) {
      return item.name;
    });
    targetBranches = randomiser.randomise(sourceBranches);
    return swapper.swapBranches(sourceBranches, targetBranches, function() {
      var branchMapping;
      branchMapping = entangle(sourceBranches, targetBranches);
      return callback(branchMapping);
    });
  });
};

exports.performSwap = performSwap;

entangle = function(origin, destination) {
  var i, j, mapping, ref;
  mapping = [];
  for (i = j = 0, ref = origin.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
    mapping.push({
      origin: origin[i],
      destination: destination[i]
    });
  }
  return mapping;
};
