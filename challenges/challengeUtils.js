// Generated by CoffeeScript 1.10.0
var calculateEndPosition, calculateItemCoordinate, calculatePath, getFirstIndexOfCoordinate, getInstructions;

calculateEndPosition = function(instructions, startingCoordinate) {
  var endPosition, ref;
  ref = calculatePath(instructions, startingCoordinate), endPosition = ref[ref.length - 1];
  return endPosition;
};

getInstructions = function(numberOfMoves) {
  var i, results;
  return (function() {
    results = [];
    for (var i = 1; 1 <= numberOfMoves ? i <= numberOfMoves : i >= numberOfMoves; 1 <= numberOfMoves ? i++ : i--){ results.push(i); }
    return results;
  }).apply(this).map(function(num) {
    var number;
    number = Math.floor(Math.random() * 4);
    if (number === 0) {
      return 'L';
    } else if (number === 1) {
      return 'R';
    } else if (number === 2) {
      return 'F';
    } else if (number === 3) {
      return 'B';
    }
  });
};

calculateItemCoordinate = function(instructions, shouldFindItem, startingCoordinate) {
  var itemAtMove, itemX, itemY;
  if (shouldFindItem) {
    itemAtMove = Math.floor(Math.random() * instructions.length + 1);
    return calculateEndPosition(instructions.slice(0, itemAtMove), startingCoordinate);
  } else {
    itemX = Math.floor(Math.random() * 20) + 50;
    itemY = Math.floor(Math.random() * 20) + 50;
    return [itemX, itemY];
  }
};

getFirstIndexOfCoordinate = function(searchCoordinate, instructions, startingCoordinate) {
  var route;
  route = calculatePath(instructions, startingCoordinate);
  return route.reduce(function(searchIndex, pos, index) {
    if (!searchIndex && pos[0] === searchCoordinate[0] && pos[1] === searchCoordinate[1]) {
      searchIndex = index;
    }
    return searchIndex;
  }, void 0);
};

calculatePath = function(instructions, startingCoordinate) {
  return instructions.reduce((function(path, instruction) {
    var prev;
    prev = path[path.length - 1];
    if (instruction === 'L') {
      path.push([prev[0], prev[1] + 1]);
    } else if (instruction === 'R') {
      path.push([prev[0], prev[1] - 1]);
    } else if (instruction === 'F') {
      path.push([prev[0] + 1, prev[1]]);
    } else {
      path.push([prev[0] - 1, prev[1]]);
    }
    return path;
  }), [startingCoordinate]);
};

exports.calculateEndPosition = calculateEndPosition;

exports.getInstructions = getInstructions;

exports.calculateItemCoordinate = calculateItemCoordinate;

exports.getFirstIndexOfCoordinate = getFirstIndexOfCoordinate;

exports.calculatePath = calculatePath;
